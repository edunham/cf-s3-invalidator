#!/usr/bin/env ruby
require 'rubygems'
unless Kernel.respond_to?(:require_relative)
  module Kernel
    def require_relative(path)
      require File.join(File.dirname(caller[0]), path.to_str)
    end
  end
end
require 'optparse'
require 'yaml'
require_relative '../lib/cloudfront_invalidator'
require_relative '../lib/s3_loader'

class UI
  def initialize
    @file_parser = FileOptionParser.new
    @cli_parser = CLIOptParser.new
  end

  def parse_or_print_help
    if ARGV.length == 0
      unless @file_parser.conf_file_exists
        print_help_and_exit
      end
      @file_parser.parse
    else
      args_original = ARGV.dup # Optparse removes the valid arguments from ARGV
      options = @cli_parser.parse
      if args_original.length == 0
        print_help_and_exit
      end
      options
    end
  end

  def print_help_and_exit
    @cli_parser.print_help
    puts ""
    puts "ALTERNATIVELY, you can use a configuration file:"
    puts ""
    @file_parser.print_help
    exit
  end

  class FileOptionParser
    def parse
      yml = YAML.load_file(get_conf_file_path)
      {
        :key => yml['s3_key'],
        :secret => yml['s3_secret'],
        :bucket => yml['s3_bucket'],
        :distribution => yml['cloudfront_distribution_id']
      }
    end

    def print_help
      puts "Add the rows below into file '#{get_conf_file_name}' and then run the program without arguments"
      puts ""
      puts sample_conf_file
      puts ""
    end

    def get_conf_file_name
      "_cf_s3_invalidator.yml"
    end

    def get_conf_file_path
      Dir.pwd + "/#{get_conf_file_name}"
    end

    def conf_file_exists
      File.exists?(get_conf_file_path)
    end

    def sample_conf_file
      sample = <<-EOF
    s3_key: YOUR_AWS_S3_ACCESS_KEY_ID
    s3_secret: YOUR_AWS_S3_SECRET_ACCESS_KEY
    s3_bucket: your.bucket.com
    cloudfront_distribution_id: YOUR_CLOUDFRONT_DISTRIBUTION_ID
      EOF
    end
  end

  class CLIOptParser
    def initialize
      @optparse = OptionParser.new do |opts|
        options = {}
        opts.banner = "Usage: #{File.basename(__FILE__)} [options]"
        opts.separator ""
        opts.separator "Invalidate an S3-based Cloudfront distribution"
        opts.separator ""
        opts.separator "Options:"
        opts.on("-k", "--key AWS KEY",
                "Amazon Web Services API key that has access to your S3 and Cloudfront") do |val|
          options[:key] = val
        end
        opts.on("-s", "--secret AWS SECRET",
                "Amazon Web Services API secret key") do |val|
          options[:secret] = val
        end
        opts.on("-b", "--bucket BUCKET NAME",
                "S3 bucket name") do |val|
          options[:bucket] = val
        end
        opts.on("-d", "--distribution CLOUDFRONT ID",
                "Cloudfront distribution id") do |val|
          options[:distribution] = val
        end
        @options = options
      end
    end

    def parse
      @optparse.parse!
      @options
    end

    def print_help
      puts @optparse.help
    end
  end
end

options = UI.new.parse_or_print_help

s3_object_keys = S3Loader.new(
  options[:key], options[:secret]).list_keys(options[:bucket])

invalidator = CloudfrontInvalidator.new(
  options[:key], options[:secret], options[:distribution])
invalidator.invalidate(s3_object_keys)
